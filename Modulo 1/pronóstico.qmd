---
title: "pronóstico"
format: html
---

```{r}
library(tidyverse)
library(fpp3)
```

```{r}
gas_train <- aus_production |> 
  filter_index(. ~ "2007 Q2")

gas_train
```

```{r}
gas_train |> 
  autoplot(log(Gas))
```
Logaritmos no logra estabilizar la varianza. Vamos a probar con Box-Cox

```{r}
gas_lambda <- gas_train |> 
  features(Gas, features = guerrero) |> 
  pull()
gas_lambda
```
```{r}
gas_train |> 
  autoplot(box_cox(Gas, lambda = gas_lambda))
```

¿Qué método de pronóstico se ajustaría mejor a esta serie?

```{r}
gas_fit <- gas_train |> 
  model(
    drift = RW(box_cox(Gas, gas_lambda) ~ drift()),
    snaive = SNAIVE(box_cox(Gas, gas_lambda)),
    media = MEAN(box_cox(Gas, gas_lambda))
  )

gas_fit
```

Vamos a hacer un **diagnóstico de los residuos** de los modelos. La función `augment()` nos permite obtener los residuos y otros valores ajustados de los modelos.

```{r}
gas_aug <- gas_fit |> 
  augment()
gas_aug
```
Gráfica de los residuos de los modelos:
```{r}
#| warning: false

gas_aug |> 
  autoplot(.innov) +
  facet_wrap(~.model, ncol = 1, scales = "free_y")
```
Gráfica de la ACF del residuo de los modelos:
```{r}
gas_aug |> 
  ACF(.innov) |>
  autoplot() +
  facet_wrap(~.model, ncol = 1, scale = "free_y")
```
Gráfica del histograma de los residuos de los modelos:
```{r}
#| warning: false

gas_aug |> 
  ggplot(aes(x = .innov, fill = .model)) +
  geom_histogram() +
  facet_wrap(~.model, ncol = 1, scales = "free_y")
```
Función para obtener el diagnóstico de residuos completo de un solo modelo:
```{r}
#| warning: false

gas_fit |> 
  select(drift) |> 
  gg_tsresiduals()+
  ggtitle("Diagnóstico de residuos para el modelo del Drift")
```
Vamos a hacer pronóstico con estos tres modelos:

```{r}
gas_fc <- gas_fit |> 
  forecast(h = "3 years")

gas_fc
```

```{r}
gas_fc |> 
  autoplot(aus_production) +
  facet_wrap(vars(.model), scale = "free_y", ncol = 1)
```
```{r}
gas_fc |> 
  accuracy(aus_production) |> 
  arrange(RMSE)
```

Esto mismo lo podríamos calcular para los residuos (en el train):

```{r}
gas_fit |> 
  accuracy() |> 
  arrange(RMSE)
```

