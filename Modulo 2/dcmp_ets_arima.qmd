---
title: "Incorporando ETS y el filtro ARIMA a pronósticos con Descomposición"
format: 
  html:
    embed-resources: true
    toc: true
---


```{r}
#| message: false

library(tidyverse)
library(fpp3)
library(ggtime)
```

## Datos

Vamos a descargar el gasto de consumo real en México desde el FRED.

```{r}
gasto_raw <- tidyquant::tq_get(
  x    = "NCRNSAXDCMXQ",
  get  = "economic.data",
  from = "1993-01-01",
)

gasto_raw

gasto_tsb <- gasto_raw |> 
  mutate(date = yearquarter(date)) |> 
  as_tsibble(index = date)

gasto_tsb

gasto_train <- gasto_tsb |> 
  filter_index(. ~ "2022 Q1")

gasto_train |> 
  autoplot(price)
```

# Ejercicio

Realizar un pronóstico a 3 años (12 trimestres) utilizando todo lo que hemos visto en clase hasta ahora:

- Modelo de referencia (*benchmark*): STL + SNAIVE + Drift

Algunas alternativas de modelos a utilizar:

- ETS
- ARIMA
- Modelos de descomposición mezclando con ETS y/o ARIMA
- Utilizar o no transformaciones matemáticas
- Combinar dos o más modelos distintos

Utilizaremos el **MASE** como métrica de error en el pronóstico.

## Modelo de referencia

```{r}
benchmark <- decomposition_model(
  STL(price, robust = TRUE),
  SNAIVE(season_year),
  RW(season_adjust ~ drift())
)
```


## Ajuste de modelos

### STL + SNAIVE + ETS

Modelo de descomposición STL con logaritmos, SNAIVE para la estacionalidad y ETS(A,A,N) para la serie desestacionalizada:

```{r}
stl_ets <- decomposition_model(
  STL(log(price), robust = TRUE),
  ETS(season_adjust ~ error("A") + trend("A") + season("N"))
)


```

### STL + SNAIVE + ARIMA

Modelo de descomposición STL con logaritmos, SNAIVE para la estacionalidad y auto-ARIMA (*no estacional*) para la serie desestacionalizada:

```{r}
stl_arima <- decomposition_model(
  STL(log(price), robust = TRUE),
  ARIMA(season_adjust ~ PDQ(0,0,0))
)
```

## Combinación ETS + ARIMA

Se puede definir un modelo combinado desde el inicio usando 

```{r}
comb_ets_arima <- combination_model(
  ETS(log(price)),
  ARIMA(log(price))
)
```


## Tabla de modelos

```{r}
gasto_fit <- gasto_train |>
  model(
    benchmark      = benchmark,
    arima          = ARIMA(log(price)),
    ets            = ETS(log(price)),
    stl_ets        = stl_ets,
    stl_arima      = stl_arima,
    comb_ets_arima = comb_ets_arima
  )

accuracy(gasto_fit) |> 
  select(.model, .type, RMSE, MAE, MAPE, MASE) |> 
  arrange(MASE)
```

## Pronósticos

```{r}
gasto_fc <- gasto_fit |> 
  forecast(h = "3 years")

p <- gasto_fc |> 
  autoplot(gasto_tsb, level = NULL)

plotly::ggplotly(p, dynamicTicks = TRUE)
```

