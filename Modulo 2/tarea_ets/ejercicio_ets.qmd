---
title: "Descargar datos de internet con `tidyquant`"
format: 
  html:
    embed-resources: true
---

# Datos

```{r}
#| message: false

library(tidyverse)
library(fpp3)
library(tidyquant) #<1>
```

1.  Cargamos la librería `tidyquant` que nos permite descargar datos económicos de internet (entre otras cosas).

## Descarga

Vamos a utilizar `tq_get()` para descargar los datos

```{r}
exports <- tq_get(
  x = "EXPMX",           #<1>
  get = "economic.data", #<2>
  from = "1985-01-01",   #<3>
  to = "2023-07-01"      #<4>
)
exports                  #<5>
```

1.  El nombre de la(s) serie(s) que queremos descargar. En este caso, las exportaciones de EEUU a México (EXPMX).
2.  El tipo de dato y fuente de donde queremos descargarlos. En este caso, datos económicos del **FRED**.
3.  Fecha de inicio de los datos.
4.  Fecha final de los datos.
5.  La tabla resultante es una `tibble`.

La `tibble` resultante tenemos que convertirla a `tsibble` y asegurarnos de que la variable de fecha tiene el formato correcto.

## `tsibble`

```{r}
exports <- exports |> 
  mutate(date = yearmonth(date)) |> #<1>
  as_tsibble(index = date)          #<2>
exports
```

1.  Convertimos la variable `date` a formato `yearmonth`.
2.  Convertimos la `tibble` a `tsibble`, indicando que la variable de fecha es `date`.

# EDA

```{r}
exports |> 
  autoplot(price)
```

```{r}
exp_lambda <- exports |> 
  features(price, guerrero) |> 
  pull(lambda_guerrero)

exp_lambda

exports |> 
  autoplot(box_cox(price, exp_lambda))

exports |> 
  gg_season(box_cox(price, exp_lambda))
```

```{r}
exports |> 
  model(STL(box_cox(price, exp_lambda) ~ season(window = "periodic"), robust = TRUE)) |> 
  components() |> 
  autoplot()
```


# Ejercicio

1.  Realizar un pronóstico a dos años para la serie (de agosto 2023 a julio de 2025).
2.  Pueden utilizar cualquier método que hemos visto en clase.
3.  Se puede realizar en parejas.
4.  Entregar un informe en `html` con el análisis y el pronóstico y un archivo `.RData` con su pronóstico final.
5.  La métrica de error a utilizar para calcular la precisión del pronóstico será el **MAE**.
6.  Fecha de entrega: 23 de septiembre.

```{r}
exports_train <- exports |> 
  filter_index(. ~ "2021 Jul")
exports_train
```

## Modelo benchmark (de referencia)

Dado que la serie tiene tendencia y estacionalidad, utilizar alguno de los métodos básicos por sí solo no produciría un buen modelo. Por lo tanto, vamos a utilizar un modelo de descomposición con drift y seasonal naive.


```{r}
exports_fit <- exports_train |> 
  model(
    base = decomposition_model(
      STL(box_cox(price, exp_lambda) ~ season(window = "periodic"), robust = TRUE),
      RW(season_adjust ~ drift()),
      SNAIVE(season_year)
    ),
    media = MEAN(box_cox(price, exp_lambda)),
    naive = NAIVE(box_cox(price, exp_lambda))
  )

exports_fit
```

```{r}
#| warning: false

accuracy(exports_fit) |> 
  arrange(MAE)

exports_fit |> 
  select(base) |> 
  gg_tsresiduals() +
  ggtitle("Diagnóstico de residuos para el modelo base")
```




```{r}
exports_fit |> 
  select(naive) |>        #<1>
  refit(exports) |>       #<2>
  forecast(h = "2 years") #<3>
```

1.  Seleccionamos el modelo que queremos utilizar para el pronóstico final.
2.  Reajustamos el modelo con todos los datos disponibles.
3.  Realizamos el pronóstico a dos años.

:::{.callout-important}
## sobre la función `refit()`

La función `refit()` desafortunadamente `Si `refit()` no funciona con el modelo que eligieron, tienen que reentrenar manualmente el modelo final con los datos completos (reemplazar en este caso `exports_train` por `exports`).

```{r}
exports |> 
  model(naive = NAIVE(price)) |> 
  forecast(h = "2 years")
```

:::

```{r}
exports_fit <- exports_train |> 
  model(
    stlf = decomposition_model(
      STL(log(price), robust = TRUE),
    RW(season_adjust ~ drift()),
    SNAIVE(season_year)
  ),
  stlf2 = decomposition_model(
    STL(log(price) ~ season(window = "periodic"), robust = TRUE),
    ETS(season_adjust ~ error("A") + trend("Ad") + season("N")
  )
  ),
  ets_aada = ETS(log(price) ~ error("A") + trend("Ad") + season("A")),
  ets_madm = ETS(log(price) ~ error("M") + trend("Ad") + season("M"))
  )

exports_fc <- exports_fit |> 
  forecast(h = "2 years") 


exports_fc

exports_fc |>
  accuracy(exports) |> 
  arrange(MAE)
```


```{r}
eq_5 <- exports_fc |> 
  filter(.model == "stlf") |> 
  mutate(.model = "eq_5")

eq_5

save(eq_5, file = "eq_5.RData")
```

